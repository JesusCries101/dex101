// https://github.com/maxogden/websocket-stream/blob/48dc3ddf943e5ada668c31ccd94e9186f02fafbd/ws-fallback.js

var ws = null

if (typeof WebSocket !== 'undefined') {
  ws = WebSocket
} else if (typeof MozWebSocket !== 'undefined') {
  ws = MozWebSocket
} else if (typeof global !== 'undefined') {
  ws = global.WebSocket || global.MozWebSocket
} else if (typeof window !== 'undefined') {
  ws = window.WebSocket || window.MozWebSocket
} else if (typeof self !== 'undefined') {
  ws = self.WebSocket || self.MozWebSocket
}
if (typeof ws.prototype.on === 'undefined') {
  ws.prototype.on = function(eventname, cb) {
    if (eventname === 'open') {
      let onopen = this.onopen;
      this.onopen = (event) => {
        onopen && onopen(event);
        cb.apply(event.target, []);
      }
    } else if (eventname === 'error') {
      let onerror = this.onerror;
      this.onerror = (event) => {
        onerror && onerror(event);
        cb.apply(event.target, [event.error]);
      }
    } else if (eventname === 'message') {
      let onmessage = this.onmessage;
      this.onmessage = (event) => {
        onmessage && onmessage(event);
        cb.apply(event.target, [event.data]);
      }
    } else if (eventname === 'close') {
      let onclose = this.onclose;
      this.onclose = (event) => {
        onclose && onclose(event);
        cb.apply(event.target, [event.code, event.reason]);
      }
    }
    return this;
  };
}

module.exports = ws
